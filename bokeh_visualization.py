# -*- coding: utf-8 -*-
"""Bokeh Visualization.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1buX0b3JGgJLOMXxeCvJsPncEMLx8H4oJ
"""

# Upload kaggle.json (from your Kaggle account → API → Create New Token)
from google.colab import files
files.upload()   # Upload kaggle.json here

# Move kaggle.json to correct path
!mkdir -p ~/.kaggle
!cp kaggle.json ~/.kaggle/
!chmod 600 ~/.kaggle/kaggle.json

# Download Dataset
!kaggle datasets download -d taweilo/taiwan-air-quality-data-20162024 -p ./ --unzip

#  Load Dataset
import pandas as pd
df = pd.read_csv("air_quality.csv", low_memory=False) # file name after unzip
print("Original Data:\n")
print(df.head())

# Common imports
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
import plotly.express as px
import plotly.graph_objects as go
from bokeh.plotting import figure, show, output_notebook
from bokeh.models import HoverTool, ColumnDataSource
from bokeh.layouts import gridplot

# Display plots inline
output_notebook()

# Load dataset
df = pd.read_csv("air_quality.csv", low_memory=False)

# Basic cleaning
df = df.rename(columns={'date': 'Date'})
df['Date'] = pd.to_datetime(df['Date'], format='mixed')

# Convert pollutant columns to numeric, coercing errors
pollutant_cols = ['pm2.5', 'pm10', 'o3', 'co', 'no2', 'so2', 'no', 'nox']
for col in pollutant_cols:
    if col in df.columns:
        df[col] = pd.to_numeric(df[col], errors='coerce')

df = df.dropna(subset=['pm2.5', 'pm10', 'o3', 'co', 'no2'])

df['Year'] = df['Date'].dt.year
df['Month'] = df['Date'].dt.month_name()

# If there's a city or station column
if 'sitename' in df.columns:
    city_col = 'sitename'
elif 'Station' in df.columns:
    city_col = 'Station'
else:
    city_col = None

# ==================== IMPORTS ====================
import pandas as pd
import numpy as np
from bokeh.io import output_notebook, show
from bokeh.plotting import figure
from bokeh.models import ColumnDataSource, HoverTool, ColorBar
from bokeh.layouts import column, gridplot
from bokeh.palettes import Spectral11, Viridis256
from bokeh.transform import linear_cmap
output_notebook()

#Histogram of AQI Distribution
import numpy as np # Import numpy
hist, edges = np.histogram(df['aqi'].dropna(), bins=30)
p1 = figure(width=800, height=350, title="Distribution of AQI ")
p1.quad(top=hist, bottom=0, left=edges[:-1], right=edges[1:],
        fill_color="skyblue", line_color="white", alpha=0.8)
p1.xaxis.axis_label = 'AQI'
p1.yaxis.axis_label = 'Frequency'
show(p1)

# Scatter with color mapping: AQI by pm2.5
from bokeh.transform import linear_cmap # Import linear_cmap

if not df.dropna(subset=['pm2.5', 'aqi', 'o3']).empty:
    source9 = ColumnDataSource(df.dropna(subset=['pm2.5', 'aqi', 'o3']).sample(min(3000, len(df.dropna(subset=['pm2.5', 'aqi', 'o3'])))))
    color_mapper = linear_cmap('o3', 'Viridis256', df['o3'].min(), df['o3'].max())
    p2 = figure(title="pm2.5 vs AQI (Color by O3)", width=600, height=400) # Changed 'PM2.5' to 'pm2.5'
    p2.scatter('pm2.5', 'aqi', source=source9, color=color_mapper, size=6, alpha=0.6) # Changed 'PM2.5' to 'pm2.5' and 'AQI' to 'aqi' and circle to scatter
    p2.xaxis.axis_label = "pm2.5" # Changed 'PM2.5' to 'pm2.5'
    p2.yaxis.axis_label = "AQI"
    p2.add_tools(HoverTool(tooltips=[("O3", "@o3"), ("Date", "@date{%F}")], formatters={'@date': 'datetime'}))
else:
    p2 = figure(title="Not enough data for pm2.5 vs AQI (Color by O3) scatter plot", width=600, height=400)
from bokeh.io import output_notebook, show
output_notebook()
show(p2)

#Heatmap: Correlation matrix
corr_cols = ['pm2.5', 'pm10', 'o3', 'no2', 'so2', 'co']
if not df[corr_cols].dropna().empty:
    corr = df[corr_cols].corr() # Changed 'PM2.5' to 'pm2.5' and 'PM10' to 'pm10'
    corr = corr.stack().reset_index(name='corr')
    p3 = figure(title="Pollutant Correlation Heatmap", x_range=corr_cols, y_range=list(reversed(corr_cols)), width=600, height=400)
    p3.rect(x='level_0', y='level_1', width=1, height=1, source=ColumnDataSource(corr),
            color=linear_cmap('corr', 'Viridis256', -1, 1))
    p3.text(x='level_0', y='level_1', text='corr', source=ColumnDataSource(corr),
            text_font_size="8pt", text_align="center", text_baseline="middle")
else:
    p3 = figure(title="Not enough data for Correlation Heatmap", width=600, height=400)
from bokeh.io import output_notebook, show
output_notebook()
show(p3)

# Area: Monthly pm2.5 and pm10
if not df.dropna(subset=['Date', 'pm2.5', 'pm10']).empty: # Changed 'date' to 'Date'
    df_monthly = df.resample('ME', on='Date')[['pm2.5', 'pm10']].mean().reset_index() # Changed 'date' to 'Date'
    source7 = ColumnDataSource(df_monthly)
    p4 = figure(title="Monthly Avg pm2.5 & pm10", x_axis_type='datetime', width=700, height=400) # Changed 'PM2.5' to 'pm2.5' and 'PM10' to 'pm10'
    p4.varea(x='Date', y1='pm2.5', y2=0, source=source7, color="blue", alpha=0.5, legend_label="pm2.5") # Changed 'PM2.5' to 'pm2.5' and 'date' to 'Date'
    p4.varea(x='Date', y1='pm10', y2=0, source=source7, color="green", alpha=0.5, legend_label="pm10") # Changed 'PM10' to 'pm10' and 'date' to 'Date'
    p4.legend.location = "top_left"
    p4.yaxis.axis_label = "Concentration (µg/m³)"
else:
    p4 = figure(title="Not enough data for Monthly Avg pm2.5 & pm10 plot", width=700, height=400)
from bokeh.io import output_notebook, show
output_notebook()
show(p4)

# Multi-line: Pollutant trends over time
if not df.dropna(subset=['Date', 'pm2.5', 'o3', 'no2']).empty:
    df_daily = df.groupby('Date')[['pm2.5', 'o3', 'no2']].mean().reset_index() # Changed 'PM2.5' to 'pm2.5' and 'O3' to 'o3' and 'NO2' to 'no2'
    source10 = ColumnDataSource(df_daily)
    p5 = figure(title="Daily Avg Pollutants", x_axis_type='datetime', width=700, height=400)
    p5.line('Date', 'pm2.5', source=source10, color="red", legend_label="pm2.5", line_width=2) # Changed 'PM2.5' to 'pm2.5'
    p5.line('Date', 'o3', source=source10, color="blue", legend_label="o3", line_width=2) # Changed 'O3' to 'o3'
    p5.line('Date', 'no2', source=source10, color="green", legend_label="no2", line_width=2) # Changed 'NO2' to 'no2'
    p5.legend.location = "top_left"
    p5.yaxis.axis_label = "Concentration"
else:
    p5 = figure(title="Not enough data for Daily Avg Pollutants line plot", width=700, height=400)
from bokeh.io import output_notebook, show
output_notebook()
show(p5)

# Bar: Average AQI by site (top 10)
from bokeh.palettes import Category10 # Import Category10
from bokeh.transform import factor_cmap # Import factor_cmap

if not df['sitename'].dropna().empty:
    top_sites_df = df.groupby('sitename')['aqi'].mean().sort_values(ascending=False).head(10).reset_index() # Changed 'site' to 'sitename' and 'AQI' to 'aqi'
    if not top_sites_df.empty:
        top_sites = top_sites_df['sitename'].tolist()
        source3 = ColumnDataSource(top_sites_df)
        p6 = figure(x_range=top_sites, title="Avg AQI by Site", width=700, height=400, toolbar_location=None) # Changed 'site' to 'sitename'
        p6.vbar(x='sitename', top='aqi', width=0.8, source=source3, color=factor_cmap('sitename', Category10[max(3, len(top_sites))], top_sites)) # Changed 'site' to 'sitename' and 'AQI' to 'aqi'
        p6.xaxis.major_label_orientation = 1.0
        p6.yaxis.axis_label = "AQI"
        p6.add_tools(HoverTool(tooltips=[("Site", "@sitename"), ("Avg AQI", "@aqi{0.2f}")], mode='vline')) # Changed 'site' to 'sitename' and 'AQI' to 'aqi'
    else:
        p6 = figure(title="Not enough data for Avg AQI by Site plot", width=700, height=400)
else:
    p6 = figure(title="No site data for Avg AQI by Site plot", width=700, height=400)
from bokeh.io import output_notebook, show
output_notebook()

show(p6)

# Line: AQI trend for multiple sites
sample_sites = df['sitename'].unique()
if len(sample_sites) >= 3:
    sample_sites = sample_sites[:3] # Changed 'site' to 'sitename' based on data
    p7 = figure(title="AQI Over Time", x_axis_type='datetime', width=600, height=400)
    colors = Category10[max(3, len(sample_sites))]
    for i, site in enumerate(sample_sites):
        data = df[df['sitename'] == site].dropna(subset=['Date', 'aqi']) # Changed 'site' to 'sitename' and 'date' to 'Date'
        if not data.empty:
            source = ColumnDataSource(data)
            p7.line('Date', 'aqi', source=source, color=colors[i], legend_label=site, line_width=2) # Changed 'AQI' to 'aqi' and 'date' to 'Date'
    p7.legend.click_policy = "hide"
    p7.xaxis.axis_label = "Date"
    p7.yaxis.axis_label = "AQI"
else:
     p7 = figure(title="Not enough sites for AQI trend plot", width=600, height=400)
from bokeh.io import output_notebook, show
output_notebook()
show(p7)

#  Scatter: PM2.5 vs O3 with hover
if len(df.dropna(subset=['pm2.5', 'o3'])) >= 2000:
    source1 = ColumnDataSource(df.dropna(subset=['pm2.5', 'o3']).sample(2000))
    p8 = figure(title="pm2.5 vs O3", width=600, height=400, tools="hover,pan,wheel_zoom,box_zoom,reset")
    p8.scatter('pm2.5', 'o3', source=source1, color="navy", alpha=0.5, size=6)
    p8.xaxis.axis_label = "pm2.5 (µg/m³)"
    p8.yaxis.axis_label = "O3 (ppb)"
    hover1 = p1.select_one(HoverTool)
    hover1.tooltips = [("Date", "@date{%F}"), ("pm2.5", "@{pm2.5}"), ("O3", "@o3")]
    hover1.formatters = {'@date': 'datetime'}
else:
    p8 = figure(title="Not enough data for pm2.5 vs O3 scatter plot", width=600, height=400)
from bokeh.io import output_notebook, show
output_notebook()
show(p8)